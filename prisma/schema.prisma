// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Người dùng hệ thống
model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  email     String     @unique
  password  String? // Optional for Google users
  name      String
  phone     String?
  address   String?
  avatar    String?
  role      UserRole   @default(CUSTOMER)
  status    UserStatus @default(ACTIVE)
  provider  String     @default("credentials") // Add provider field
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  isDeleted Boolean    @default(false)

  // Relationships
  customer      Customer?      @relation
  customerId    String?        @db.ObjectId
  homestays     Homestay[]
  admin         Admin?         @relation
  adminId       String?        @db.ObjectId
  reviews       Review[]
  complaints    Complaint[]
  notifications Notification[]
}

enum UserRole {
  ADMIN
  OWNER
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

// Thông tin khách hàng
model Customer {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @unique @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])
  totalBookings Int      @default(0)
  totalSpent    Float    @default(0)
  preferences   Json? // Lưu trữ các sở thích của khách hàng
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isDeleted     Boolean  @default(false)

  // Relationships
  bookings   Booking[]
  reviews    Review[]
  complaints Complaint[]
  wishlist   WishlistItem[]
  carts      Cart[]
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum DocumentType {
  ID_CARD
  BUSINESS_LICENSE
  TAX_CERTIFICATE
  BANK_STATEMENT
  PROPERTY_DOCUMENT
  OTHER
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}

// Thông tin quản trị viên
model Admin {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  position    String?
  permissions String[] // Mảng các quyền hạn
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)

  // Relationships
  homestayApprovals HomestayApproval[]
}

// Homestay
model Homestay {
  id                   String         @id @default(auto()) @map("_id") @db.ObjectId
  ownerId              String         @db.ObjectId
  owner                User           @relation(fields: [ownerId], references: [id])
  name                 String
  slug                 String         @unique
  description          String
  location             Float[]
  address              String
  price                Float
  rating               Float          @default(5)
  maxGuests            Int
  totalRooms           Int
  amenities            String[]
  featured             Boolean        @default(false)
  allowsPartialBooking Boolean        @default(true) // Cho phép đặt từng phòng
  status               HomestayStatus @default(PENDING)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  isDeleted            Boolean        @default(false)

  // Relationships
  rooms            Room[]
  images           String[]
  bookings         Booking[]
  reviews          Review[]
  approvals        HomestayApproval[]
  unavailableDates UnavailableDate[]
  wishlistItems    WishlistItem[]
  cartItems        CartItem[]
}

enum HomestayStatus {
  PENDING
  ACTIVE
  INACTIVE
  MAINTENANCE
  REJECTED
}

// Phòng trong homestay
model Room {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  homestayId  String     @db.ObjectId
  homestay    Homestay   @relation(fields: [homestayId], references: [id])
  name        String
  description String
  price       Float
  capacity    Int
  size        Float? // Kích thước phòng (m²)
  amenities   String[]
  status      RoomStatus @default(AVAILABLE)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isDeleted   Boolean    @default(false)
  images      String[]

  // Relationships
  beds             Bed[]
  bookingItems     BookingItem[]
  unavailableDates UnavailableDate[]
}

enum RoomStatus {
  AVAILABLE
  BOOKED
  MAINTENANCE
}

// Giường trong phòng
model Bed {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  roomId String  @db.ObjectId
  room   Room    @relation(fields: [roomId], references: [id])
  type   BedType
  count  Int     @default(1)
}

enum BedType {
  SINGLE
  TWIN
  DOUBLE
  QUEEN
  KING
  SOFA_BED
  BUNK_BED
}

// Ngày không khả dụng (đã đặt hoặc bảo trì)
model UnavailableDate {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  date   DateTime
  reason String?

  // Có thể áp dụng cho cả homestay hoặc phòng cụ thể
  homestayId String?   @db.ObjectId
  homestay   Homestay? @relation(fields: [homestayId], references: [id])
  roomId     String?   @db.ObjectId
  room       Room?     @relation(fields: [roomId], references: [id])

  // Đảm bảo mỗi ngày chỉ có một bản ghi cho mỗi homestay/phòng
  @@unique([date, homestayId])
  @@unique([date, roomId])
}

// Đặt phòng
model Booking {
  id                 String         @id @default(auto()) @map("_id") @db.ObjectId
  bookingNumber      String
  customerId         String         @db.ObjectId
  customer           Customer       @relation(fields: [customerId], references: [id])
  homestayId         String         @db.ObjectId
  homestay           Homestay       @relation(fields: [homestayId], references: [id])
  checkIn            DateTime
  checkOut           DateTime
  guests             Int
  totalPrice         Float
  bookingType        BookingType
  status             BookingStatus  @default(PENDING)
  paymentStatus      PaymentStatus  @default(PENDING)
  paymentMethod      PaymentMethod?
  specialRequests    String?
  cancellationReason String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  isDeleted          Boolean        @default(false)

  // Relationships
  bookingItems BookingItem[]
  payments     Payment[]
  refunds      Refund[]
  reviews      Review[]
  complaints   Complaint[]
}

enum BookingType {
  WHOLE
  ROOMS
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
  UPCOMING
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  REFUNDED
  PARTIALLY_REFUNDED
  FAILED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  CASH
  PAYPAL
  MOMO
  VNPAY
  ZALOPAY
}

// Chi tiết đặt phòng (khi đặt từng phòng)
model BookingItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  bookingId String  @db.ObjectId
  booking   Booking @relation(fields: [bookingId], references: [id])
  roomId    String  @db.ObjectId
  room      Room    @relation(fields: [roomId], references: [id])
  price     Float // Giá tại thời điểm đặt
  quantity  Int     @default(1)
  discount  Float   @default(0)
  notes     String?
}

// Thanh toán
model Payment {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  bookingId     String        @db.ObjectId
  booking       Booking       @relation(fields: [bookingId], references: [id])
  amount        Float
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String? // ID giao dịch từ cổng thanh toán
  paymentDate   DateTime      @default(now())
  notes         String?
  paymentDetails Json? // Chi tiết thanh toán (thông tin thẻ, ngân hàng, v.v.)
}

model PaymentSession {
  id        String               @id @default(auto()) @map("_id") @db.ObjectId
  userId    String               @db.ObjectId
  payload   Json
  status    PaymentSessionStatus @default(SUCCESS)
  sessionId String               @unique
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

enum PaymentSessionStatus {
  PENDING
  SUCCESS
  FAILED
}

// Hoàn tiền
model Refund {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  bookingId  String       @db.ObjectId
  booking    Booking      @relation(fields: [bookingId], references: [id])
  amount     Float
  reason     String
  status     RefundStatus @default(PENDING)
  refundDate DateTime?
  notes      String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  isDeleted  Boolean      @default(false)
}

enum RefundStatus {
  PENDING
  PROCESSED
  REJECTED
}

enum TransactionType {
  PAYOUT
  COMMISSION
  REFUND
  ADJUSTMENT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

// Đánh giá
model Review {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  customerId     String       @db.ObjectId
  customer       Customer     @relation(fields: [customerId], references: [id])
  ownerId        String       @db.ObjectId
  owner          User         @relation(fields: [ownerId], references: [id])
  homestayId     String       @db.ObjectId
  homestay       Homestay     @relation(fields: [homestayId], references: [id])
  bookingId      String?      @db.ObjectId
  booking        Booking?     @relation(fields: [bookingId], references: [id])
  rating         Int
  comment        String
  status         ReviewStatus @default(PENDING)
  ownerReply     String?
  ownerReplyDate DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  isDeleted      Boolean      @default(false)
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

// Khiếu nại
model Complaint {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  customerId  String            @db.ObjectId
  customer    Customer          @relation(fields: [customerId], references: [id])
  userId      String            @db.ObjectId
  user        User              @relation(fields: [userId], references: [id])
  bookingId   String?           @db.ObjectId
  booking     Booking?          @relation(fields: [bookingId], references: [id])
  type        ComplaintType
  subject     String
  description String
  status      ComplaintStatus   @default(OPEN)
  priority    ComplaintPriority @default(MEDIUM)
  resolution  String?
  resolvedAt  DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  isDeleted   Boolean           @default(false)

  // Relationships
  attachments ComplaintAttachment[]
  responses   ComplaintResponse[]
}

enum ComplaintType {
  SERVICE
  CLEANLINESS
  SAFETY
  BOOKING
  PAYMENT
  CANCELLATION
  OTHER
}

enum ComplaintStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum ComplaintPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Tệp đính kèm khiếu nại
model ComplaintAttachment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  complaintId String    @db.ObjectId
  complaint   Complaint @relation(fields: [complaintId], references: [id])
  fileUrl     String
  fileName    String
  fileType    String
  uploadedAt  DateTime  @default(now())
}

// Phản hồi khiếu nại
model ComplaintResponse {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  complaintId   String        @db.ObjectId
  complaint     Complaint     @relation(fields: [complaintId], references: [id])
  responderType ResponderType // Người phản hồi là admin hay chủ homestay
  responderName String
  message       String
  createdAt     DateTime      @default(now())
}

enum ResponderType {
  ADMIN
  OWNER
  CUSTOMER
}

// Phê duyệt homestay
model HomestayApproval {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  homestayId  String         @db.ObjectId
  homestay    Homestay       @relation(fields: [homestayId], references: [id])
  adminId     String?        @db.ObjectId
  admin       Admin?         @relation(fields: [adminId], references: [id])
  status      ApprovalStatus @default(PENDING)
  notes       String?
  checklist   Json? // Danh sách kiểm tra các tiêu chí
  submittedAt DateTime       @default(now())
  reviewedAt  DateTime?
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  NEEDS_CHANGES
}

// Danh sách yêu thích
model WishlistItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  customerId String   @db.ObjectId
  customer   Customer @relation(fields: [customerId], references: [id])
  homestayId String   @db.ObjectId
  homestay   Homestay @relation(fields: [homestayId], references: [id])
  addedAt    DateTime @default(now())

  @@unique([customerId, homestayId])
}

// Thông báo
model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String           @db.ObjectId
  user      User             @relation(fields: [userId], references: [id])
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  relatedId String? // ID của đối tượng liên quan (booking, review, etc.)
  createdAt DateTime         @default(now())
}

enum NotificationType {
  BOOKING
  PAYMENT
  REVIEW
  SYSTEM
  PROMOTION
  COMPLAINT
  APPROVAL
}

model OtpCode {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String // Email người nhận OTP
  otp       String // Mã OTP
  expiresAt DateTime // Thời gian hết hạn
  createdAt DateTime @default(now())
  attempts  Int      @default(0) // Số lần thử nhập OTP
}

// Giỏ hàng của khách hàng
model Cart {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  customerId String     @db.ObjectId
  customer   Customer   @relation(fields: [customerId], references: [id])
  items      CartItem[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  isDeleted  Boolean    @default(false)
  status     CartStatus @default(ACTIVE) // Trạng thái giỏ hàng
}

// Mục trong giỏ hàng
model CartItem {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  cartId      String         @db.ObjectId
  cart        Cart           @relation(fields: [cartId], references: [id])
  homestayId  String         @db.ObjectId
  homestay    Homestay       @relation(fields: [homestayId], references: [id])
  checkIn     DateTime
  checkOut    DateTime
  guests      Int
  nights       Int // Số đêm
  rooms       Json
  note        String? // Ghi chú của khách hàng
  totalPrice  Float // Tổng giá
  bookingType BookingType // Loại đặt phòng (toàn bộ homestay hoặc từng phòng)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  isDeleted   Boolean        @default(false)
}

enum CartStatus {
  ACTIVE
  CHECKED_OUT
  ABANDONED
}
